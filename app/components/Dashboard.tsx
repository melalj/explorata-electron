/* eslint-disable jsx-a11y/anchor-is-valid */
/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable react/prop-types */

import React from 'react';
import { bindActionCreators, Dispatch } from 'redux';
import { connect } from 'react-redux';
import { Button } from 'antd';
import { shell, ipcRenderer } from 'electron';

import * as Actions from '../state/actions';
import { reports, screens } from '../constants';

import ViewFbMessenger from '../plugins/FB_MESSENGER/view';

function goGithub() {
  shell.openExternal('https://www.github.com/melalj/explorata');
}

class Dashboard extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      modelLoaded: false
    };
  }

  async componentDidMount() {
    // Load Model and then
    const { setLoading, droppedFiles, currentReport } = this.props;
    setLoading(true);
    if (currentReport === reports.FB_MESSENGER) {
      await ipcRenderer.invoke('fbMessengerLoadDataset', droppedFiles);
    }
    this.setState({ modelLoaded: true });
    setLoading(false);
  }

  getReportView() {
    const { currentReport } = this.props;
    if (currentReport === reports.FB_MESSENGER) {
      return <ViewFbMessenger />;
    }
    return null;
  }

  render() {
    const { currentReport, goDropfiles, isLoading } = this.props;
    const { modelLoaded } = this.state;
    if (isLoading) return null;
    return (
      <div className="page">
        <div>
          <div style={{ float: 'right' }}>
            <Button onClick={() => goGithub()}>Contribute on Github</Button>
            <Button onClick={() => goDropfiles()}>Upload new dataset</Button>
          </div>
          <p>
            Facebook Messenger Report generated by
            <a onClick={() => shell.openExternal('https://explorata.io')}>
              {' '}
              Explorata.io
            </a>
          </p>
        </div>
        {!currentReport || !modelLoaded ? null : this.getReportView()}
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    currentReport: state.currentReport,
    droppedFiles: state.droppedFiles,
    isLoading: state.isLoading
  };
}

function mapDispatchToProps(dispatch: Dispatch) {
  return bindActionCreators(
    {
      goDropfiles: () => Actions.setCurrentScreen(screens.DROPFILES),
      setLoading: d => Actions.setLoading(d),
      setError: e => Actions.setError(e)
    },
    dispatch
  );
}

export default connect(mapStateToProps, mapDispatchToProps)(Dashboard);
